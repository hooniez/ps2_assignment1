RAM

ECC Ram:
More expensive and slower
Does automatic erro correction (corrects for errors causes by background radiation)
Mostly used in deviceds where reliability is critical.

Non-ECC Ram:
Cheaper and faster
Much more used than ECC Ram
No auto correction

DDR Ram:
DDR: Can do read/write opperations at twice the speed of orginal ram.
Operation twice for each clock, 1 per rise 1 per fall
DDR2. 2 Accesses per rise fall of clock
DDR3: Twice the transfer rate as DDR2

Pins:
Connect the ram to motherboard.
More pins is better.
SIMM single line memory. Older version
DIMM Two rows of Pins

Static RAM vs Dynamic RAM:

Static Ram:
Does not need to refresh the storage,
better performance,
More expensive
Not as scalable
Dynamic Ram:
Requires refresh
slower than static
cheaper than static
More scalable.

Motherboard channels slots:
Multiple channels between motherboard and ram.
Duel channel RAM has two 64bit data channels.
Requires Motherboard functionality.
The channels normally alternate

01 ch1
02 ch2
03 ch1
04 ch2

Depending on what you have changes how to combine the channels

Memory timing:
Measures Ram performance.
CAS Latency - Time to access memory column if row is already open
Row Address to column address delay - Time to read fiirst bit without an active row
Row precharge time: Time to access column if wrong row is open
Row active time: Time required to internally refresh row

Project Work:
12:30pm 21-09-2021:
Working on improved pool implementation:
Found bug with how roofs, windows and doors are interacting with pools.
Solved roofs and window bug easy. Working on solution for doors (problem is less trivial as has to do witrh the way doors are selecting their type)
1:18pm 21-09-2021:
Fixed the pool related bugs by changing the position that pool types are calculated. Also improve code efficiency slightly.
Beginning work on more advanced pools
2:37pm 21-09-2021:
Change the way that the room.connectedRooms array was working, rather than hold the indexs of the rooms I have changed it to instead hold pointers to its neighbors, this simplifys the code and is more obvious
3:33pm 21-09-2021:
Finished first step in connected pools together, my coding skills have really improved during the project and the code is starting to look much simpler
5:05pm 21-09-2021:
Finished connecting pools, found a bug which can be easily fixed in the way that a room was deciding what type of door to build.
8:40 21-09-2021:
Fixed bug with implementation of pool, the room will now check what room type created it when it is created

CPU
Every CPU has a different instruction set
This creates different incompatibilities between systems, making coding at a low level very difficult
This is the reason that different higher level programming languages emerged
CPU executes simple instructions quickly

3:55pm 22-09-2021:
Working on fixing issue with rooms when there is a different width and height.
Creating furniture for rooms, current implementation is to put a piece wherever their is free wall space. Working on long chair

6:39pm 22-09-2021:
Finished creating first couch. Found error when staircase intesects with the couch, will need to have the length of the couch be effected by the location of the staircase

~11:30pm -> 3:05pm 23-09-2021:
Varius bug fixes and changes. Added doors to all the rooms rather than hole. Implemented a desk type of furniture.

3:08pm 23-09-2021:
Looking at how to add a gate to the pool fences.

5:30 23-09-2021:
Working on carpets, finished implementation
Creating forloops for house creation. Had problem with the length of rooms being longer than expected.
Error caused by small bug, found and fix (if -> elif)

10:14 23-09-2021:
Creating a garden class to fill empty space
Finished implementing garden class

Afternoone 24-09-2021:
Worked with zain to help fix the issues in pool detecting where the door is. Feel like the solution was not the best possible but still effective.

10:00 24-09-2021:
Implemented better what to draw the the front door, now detects the corner where the path connects and joins based on that location. Took a while to implement but final code is quiet simple so happy with the outcome