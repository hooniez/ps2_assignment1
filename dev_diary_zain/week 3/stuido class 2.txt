CPU information

virtual machines recreate CPU in software.

CPU works with the motherboard and peripherals by executing instructions

every CPU is made differently. Each CPU will have its own set of instructions.

programming languages were developed to work in a similar way on every differnet operating system and CPU.


CPU executes simple instructions at a relatively fast rate. Low level instructions will be quite different from high level instructions in programming languages.

A CPU will read instructions from the main memory and execute three operations:
1)get current instruction(fetch)
(decode instructions)
2)execute
3)write back

modern CPUs are comprised of:
ALU - arithmatic and logical unit - deals with mathematical operations on binary numbers
FPU - deals with floating point operations
SIMD - allows you to operate on an array of points (for vectors)

the sequential model allowed for faster operations - executed one operation at a time.

the first big improvement to CPUs was pipelining.

pipelining involves starting a new fetch request as soon as the decode of the previous instruction is going on. This allows for multiple instructions to be executed at once.

pipelining is like a production line, where each station completes a different step concurrently. eg for a car maanufacturer, one person install the doors, the next adds the tyres and they can work independently at the same time as cars go past

super scalar executions allow for 2 instructions to be executed together in the same clock cycle.

superscalar a-la-SIMD(single Instruction Multiple Data) is the current model - allows us to run multiple instructions in one clock cycle.


modern architectures have elements of two main approaches to computer architecture and ISAs:

>CISC(complex instruction set computer) - now is much more abundant
>RISC(reduced instruction set computer)



